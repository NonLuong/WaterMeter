// ...existing code...
package services

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/line/line-bot-sdk-go/v7/linebot"
	"github.com/watermeter/suth/config"
	"github.com/watermeter/suth/entity"
	"gorm.io/gorm"
)

// ...existing code...

var db *gorm.DB

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô main.go ‡πÄ‡∏û‡∏∑‡πà‡∏≠ set database connection
func SetDatabase(database *gorm.DB) {
	db = database
}

// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥
func SaveWaterUsage(usage entity.WaterMeterValue) error {
	return db.Create(&usage).Error
}

// ‡∏î‡∏∂‡∏á LineUserID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE
func getSelectedLineUserIDs() ([]string, error) {
	var users []entity.Users
	err := db.Model(&entity.Users{}).Where("is_selected_for_line = ?", true).Find(&users).Error
	if err != nil {
		return nil, err
	}
	var ids []string
	for _, u := range users {
		if u.LineUserID != nil && *u.LineUserID != "" {
			ids = append(ids, *u.LineUserID)
		}
	}
	return ids, nil
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î (group by LocationID)
func GetLatestUsageGroupedByLocation() ([]entity.WaterMeterValue, error) {
	var latestUsages []entity.WaterMeterValue

	subQuery := db.Model(&entity.WaterMeterValue{}).
		Select("MAX(timestamp) as timestamp, location_id").
		Group("location_id")

	err := db.
		Table("water_usages").
		Joins("JOIN (?) as latest ON water_usages.location_id = latest.location_id AND water_usages.timestamp = latest.timestamp", subQuery).
		Scan(&latestUsages).Error

	return latestUsages, err
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func GetAllWaterUsage() ([]entity.WaterMeterValue, error) {
	var records []entity.WaterMeterValue
	err := db.Order("timestamp DESC").Find(&records).Error
	return records, err
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
func GetDailyUsageByLocation(locationId string, date time.Time) (float64, error) {
	var total float64
	startOfDay := date.Truncate(24 * time.Hour)
	endOfDay := startOfDay.Add(24 * time.Hour)

	err := db.Model(&entity.WaterMeterValue{}).
		Where("location_id = ? AND timestamp >= ? AND timestamp < ?", locationId, startOfDay, endOfDay).
		Select("SUM(usage)").Scan(&total).Error

	return total, err
}

/* ========== ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å + ‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ + ‡πÅ‡∏à‡πâ‡∏á LINE (‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏ö) ========== */

// ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
type UsageThreshold struct {
	MaxUsagePerRecord int     // ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î (‡∏•‡∏¥‡∏ï‡∏£) ‡πÄ‡∏ä‡πà‡∏ô > 500 L ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
	MaxRateLpm        float64 // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏•‡∏¥‡∏ï‡∏£/‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏°
	MinIntervalMin    float64 // ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤ (‡∏Å‡∏±‡∏ô‡∏´‡∏≤‡∏£‡∏®‡∏π‡∏ô‡∏¢‡πå) ‡πÄ‡∏ä‡πà‡∏ô 0.5 ‡∏ô‡∏≤‡∏ó‡∏µ
}

var DefaultUsageThreshold = UsageThreshold{
	MaxUsagePerRecord: 500.0,
	MaxRateLpm:        50.0,
	MinIntervalMin:    0.5,
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏à‡∏∞‡∏¢‡∏¥‡∏á LINE ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏à‡∏≤‡∏Å .env
func SaveWaterUsageAndNotify(usage entity.WaterMeterValue) error {
	// 1) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
	if err := SaveWaterUsage(usage); err != nil {
		return err
	}
	// 2) ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)
	return checkAbnormalAndNotify(usage, DefaultUsageThreshold)
}

/* ---------- Helpers ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå ---------- */

// ‡∏î‡∏∂‡∏á‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á location ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤/‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
func getPrevUsage(locationId any, before time.Time) (*entity.WaterMeterValue, error) {
	if db == nil {
		return nil, errors.New("services.db is nil (did you call services.SetDatabase?)")
	}
	var prev entity.WaterMeterValue
	err := db.Where("location_id = ? AND timestamp < ?", locationId, before).
		Order("timestamp DESC").
		First(&prev).Error
	if errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, nil
	}
	return &prev, err
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô DB (is_selected_for_line)
func multicastToSelectedUsers(text string) error {
	ids, err := getSelectedLineUserIDs()
	if err != nil || len(ids) == 0 {
		return err
	}
	bot, err := linebot.New(config.Cfg.LineChannelSecret, config.Cfg.LineChannelAccessToken)
	if err != nil {
		return err
	}
	_, err = bot.Multicast(ids, linebot.NewTextMessage(text)).Do()
	return err
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ usage ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏•‡∏∞‡∏¢‡∏¥‡∏á LINE
func checkAbnormalAndNotify(u entity.WaterMeterValue, th UsageThreshold) error {
	reasons := []string{}

	// 1) ‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏ô‡πà ‡πÜ
	if u.MeterValue < 0 {
		reasons = append(reasons, "‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏ï‡∏¥‡∏î‡∏•‡∏ö")
	}

	// 2) ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î
	if u.MeterValue > th.MaxUsagePerRecord {
		reasons = append(reasons, fmt.Sprintf("Usage %.2f L > %.2f L", u.MeterValue, th.MaxUsagePerRecord))
	}

	// 3) ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏• (L/min) ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
	prev, err := getPrevUsage(u.CameraDeviceID, u.Timestamp)
	if err != nil {
		return err
	}
	if prev != nil {
		dtMin := u.Timestamp.Sub(prev.Timestamp).Minutes()
		if dtMin < th.MinIntervalMin {
			dtMin = th.MinIntervalMin
		}
		rate := float64(u.MeterValue) / dtMin // L/min
		if rate > th.MaxRateLpm {
			reasons = append(reasons, fmt.Sprintf("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏• %.2f L/min > %.2f L/min", rate, th.MaxRateLpm))
		}
	}

	// ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á
	if len(reasons) == 0 {
		return nil
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
	loc := fmt.Sprintf("%v", u.CameraDeviceID)
	msg := fmt.Sprintf(
		"üö® ‡∏ô‡πâ‡∏≥‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥\nLocation: %s\nUsage: %.2f L\n‡πÄ‡∏ß‡∏•‡∏≤: %s\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: %s",
		loc,
		u.MeterValue,
		u.Timestamp.Local().Format("02/01 15:04"),
		strings.Join(reasons, "; "),
	)

	// ‡∏¢‡∏¥‡∏á LINE ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
	return multicastToSelectedUsers(msg)
}
