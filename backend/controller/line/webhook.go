package line

import (
	"log"
	"net/http"

	"github.com/watermeter/suth/config"
	"github.com/gin-gonic/gin"
	"github.com/line/line-bot-sdk-go/v7/linebot"
)

// WebhookHandler handles incoming LINE webhook events
func WebhookHandler(c *gin.Context) {
	bot, err := linebot.New(config.Cfg.LineChannelSecret, config.Cfg.LineChannelAccessToken)
	if err != nil {
		log.Println("[line] ‚ùå bot init error:", err)
		c.Status(http.StatusInternalServerError)
		return
	}

	events, err := bot.ParseRequest(c.Request)
	if err != nil {
		if err == linebot.ErrInvalidSignature {
			log.Println("[line] ‚ùå invalid signature")
			c.Status(http.StatusBadRequest)
			return
		}
		log.Println("[line] ‚ùå parse error:", err)
		c.Status(http.StatusInternalServerError)
		return
	}

	for _, ev := range events {
		if ev.Source.Type != linebot.EventSourceTypeUser {
			continue
		}

		lineUserID := ev.Source.UserID

		switch ev.Type {
		case linebot.EventTypeFollow:
			log.Printf("[line] ‚úÖ FOLLOW: lineUserID=%s\n", lineUserID)

			// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞ LINE User ID
			message1 := linebot.NewTextMessage("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô! üéâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥ LINE User ID ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:")
			message2 := linebot.NewTextMessage(lineUserID)
			_, err = bot.ReplyMessage(ev.ReplyToken, message1, message2).Do()
			if err != nil {
				log.Println("[line] ‚ùå reply error:", err)
			}

		case linebot.EventTypeMessage:
			switch m := ev.Message.(type) {
			case *linebot.TextMessage:
				log.Printf("[line] üí¨ MSG from %s: %s\n", lineUserID, m.Text)

				switch m.Text {
				case "id", "ID", "Id", "iD":
					// ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE User ID ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
					message1 := linebot.NewTextMessage("LINE User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:")
					message2 := linebot.NewTextMessage(lineUserID)
					_, err = bot.ReplyMessage(ev.ReplyToken, message1, message2).Do()
					if err != nil {
						log.Println("[line] ‚ùå reply error:", err)
					}

				case "help", "Help", "HELP":
					help := "üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:\n‚Ä¢ id ‚Äî ‡∏î‡∏π LINE User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‚Ä¢ help ‚Äî ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
					_, err = bot.ReplyMessage(ev.ReplyToken, linebot.NewTextMessage(help)).Do()
					if err != nil {
						log.Println("[line] ‚ùå reply error:", err)
					}

				default:
					unknown := "‚ùì ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå 'help' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
					_, err = bot.ReplyMessage(ev.ReplyToken, linebot.NewTextMessage(unknown)).Do()
					if err != nil {
						log.Println("[line] ‚ùå reply error:", err)
					}
				}
			}
		}
	}

	c.Status(http.StatusOK)
}
